ENV["RAILS_ENV"] ||= 'test'
require 'rubygems'
require 'factory_girl'
require 'devise'
require 'sentient_user'
require_relative '../config/initializers/sentient_store'
#Dir["#{File.dirname(__FILE__)}/factories/**/*.rb"].each { |f| require f }
require 'database_cleaner'
require 'byebug'
require 'pry-nav'
require "pry"
require 'capybara/rails'
require 'capybara/rspec'
Capybara.javascript_driver = :webkit
# Capybara.app_host = 'http://eloe.localhost:3000'
Capybara.asset_host = 'http://eloe.localhost:3000'
Capybara.always_include_port = true
Capybara.exact = false
Capybara.configure do |config|
  config.default_host = 'http://eloe.localhost:3000'
end
# Capybara.register_driver :chrome do |app|
#   Capybara::Selenium::Driver.new(app, :browser => :chrome)
# end

# Capybara.javascript_driver = :chrome
# Capybara.asset_host = "http://localhost:3000"

FactoryGirl.definition_file_paths = %w{./factories ./test/factories ./spec/factories}
Dir[Rails.root.join('spec/support/**/*.rb')].each { |f| require f }
# This file was generated by the `rails generate rspec:install` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# The generated `.rspec` file contains `--require spec_helper` which will cause
# this file to always be loaded, without a need to explicitly require it in any
# files.
#
# Given that it is always loaded, you are encouraged to keep this file as
# light-weight as possible. Requiring heavyweight dependencies from this file
# will add to the boot time of your test suite on EVERY test run, even for an
# individual file that may not need all of that loaded. Instead, consider making
# a separate helper file that requires the additional dependencies and performs
# the additional setup, and require it from the spec files that actually need
# it.
#
# The `.rspec` file also contains a few flags that are not defaults but that
# users commonly want.
#
# See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration

RSpec.configure do |config|
  # config.filter_run :focus => true
  Capybara.reset_sessions!
  config.include Capybara::DSL
  config.include FactoryGirl::Syntax::Methods

  # config.include OmniAuthHelper
  config.include Devise::Test::ControllerHelpers, type: :controller
  config.include Devise::Test::ControllerHelpers, type: :view
  config.include Warden::Test::Helpers
  config.include SentientUser
  
  config.include Shoulda::Matchers::Independent

  if defined?(ActiveRecord)
    config.include Shoulda::Matchers::ActiveRecord
  end

  if defined?(ActiveModel)
    config.include Shoulda::Matchers::ActiveModel
  end

  if defined?(ActionController)
    config.include Shoulda::Matchers::ActionController
    config.include SentientController, type: :controller
  end

  config.backtrace_exclusion_patterns = [
     /\/lib\d*\/ruby\//,
     /bin\//,
     /gems/
     # /spec\/spec_helper\.rb/,
     # /lib\/rspec\/(core|expectations|matchers|mocks)/
   ]

   config.after :each do
     Warden.test_reset!
   end

  config.before(:suite) do
    DatabaseCleaner.strategy = :truncation
  end

  config.before(:each) do
    DatabaseCleaner.start
  end

  config.after(:each) do
    DatabaseCleaner.clean
  end

  # rspec-expectations config goes here. You can use an alternate
  # assertion/expectation library such as wrong or the stdlib/minitest
  # assertions if you prefer.
  config.expect_with :rspec do |expectations|
    # This option will default to `true` in RSpec 4. It makes the `description`
    # and `failure_message` of custom matchers include text for helper methods
    # defined using `chain`, e.g.:
    #     be_bigger_than(2).and_smaller_than(4).description
    #     # => "be bigger than 2 and smaller than 4"
    # ...rather than:
    #     # => "be bigger than 2"
    expectations.include_chain_clauses_in_custom_matcher_descriptions = true
  end

  # rspec-mocks config goes here. You can use an alternate test double
  # library (such as bogus or mocha) by changing the `mock_with` option here.
  config.mock_with :rspec do |mocks|
    # Prevents you from mocking or stubbing a method that does not exist on
    # a real object. This is generally recommended, and will default to
    # `true` in RSpec 4.
    mocks.verify_partial_doubles = true
  end
end